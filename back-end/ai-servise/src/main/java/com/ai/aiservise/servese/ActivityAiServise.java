package com.ai.aiservise.servese;


import com.ai.aiservise.model.Activity;
import com.ai.aiservise.model.Recommendation;
import com.ai.aiservise.repo.RecommendationRepo;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

@Service
@Slf4j
public class ActivityAiServise {
    @Autowired
    GeminiServise geminiServise;

    @Autowired
    RecommendationRepo recommendationRepo;

    public String getActivityFromAi(Activity activityId) {
        String response = activityToPromt(activityId);
        String responseFromAi = geminiServise.getAnswer(response);
        processActivityAndAiResponse(activityId,responseFromAi);
        return responseFromAi;

    }

    public void processActivityAndAiResponse(Activity activity, String response) {
        Recommendation recommendation = new Recommendation();
        recommendation.setActivityId(activity.getActivityId());
        recommendation.setActivityType(activity.getActivityType());
        recommendation.setUserId(activity.getUserId());

        log.info("response from ai user id {} activity id {}",activity.getUserId(),activity.getActivityId());

        ObjectMapper objectMapper = new ObjectMapper();

        try {
            // Step 1: Extract the JSON string from the AI response
            JsonNode rootNode = objectMapper.readTree(response);
            JsonNode textNode = rootNode.path("candidates").get(0).path("content").path("parts").get(0).path("text");

            String rawJson = textNode.asText()
                    .replaceAll("```json\\n", "")
                    .replaceAll("\\n```", "")
                    .trim();

            log.info("analysis from ai parser response text: {}", rawJson);

            // ✅ Step 2: Parse the cleaned JSON string into a JsonNode again
            JsonNode cleanedRoot = objectMapper.readTree(rawJson);
            JsonNode analysis = cleanedRoot.path("analysis");

            // ✅ Step 3: Extract suggestions
            List<String> suggestions = new ArrayList<>();
            for (JsonNode suggestionNode : analysis.path("suggestions")) {
                String suggestion = suggestionNode.path("suggestion").asText(null);
                if (suggestion != null) {
                    suggestions.add(suggestion);
                }
            }

            // ✅ Step 4: Extract improvements
            List<String> improvements = new ArrayList<>();
            for (JsonNode improvementNode : analysis.path("improvement")) {
                String improvement = improvementNode.path("improvement").asText(null);
                if (improvement != null) {
                    improvements.add(improvement);
                }
            }

            // ✅ Step 5: Finalize recommendation object
            recommendation.setSuggetion(suggestions);
            recommendation.setImpruvment(improvements);
            recommendation.setRecommendation("Generated by AI based on your activity.");
            recommendation.setCreatedAt(LocalDateTime.now());

            // Optionally: Save to DB or return

            Recommendation responseAfterSave=recommendationRepo.save(recommendation);
            log.info("saved recommendation: {}", responseAfterSave);
            System.out.println();
            log.info("Final recommendation: {}", recommendation);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private String activityToPromt(Activity activity) {
        return String.format("""
                    Analyze the following fitness activity and provide a detailed response in JSON format. The response should include:
                
                    {
                      "analysis": {
                        "activityType": "%s",
                        "duration": "%d minutes",
                        "pace": "", // e.g. average pace if available
                        "heartRate": "", // e.g. average heart rate during activity
                        "caloriesBurned": "%d",
                
                        "improvement": [
                          {
                            "area": "", // e.g. cardio, strength, flexibility
                            "improvement": "", // suggestion to improve the activity
                            "reason": "" // why the improvement is beneficial
                          }
                        ],
                
                        "suggestions": [
                          {
                            "area": "", // same as above
                            "suggestion": "", // suggestion for future activities
                            "reason": "" // reason for suggestion
                          }
                        ]
                      }
                    }
                
                    Additional activity information:
                    %s
                
                    Please analyze and return a structured JSON response as described.
                """, activity.getActivityType(), activity.getDuration(), activity.getCaleryburn(), activity.getActivity());
    }
}